{"version":3,"sources":["js\\entities\\chessBoard.js"],"names":["ChessBoard","size","n","border","cols","rows","tiles","Array","i","push","Tile","tile","index","indexOf","Math","floor","x","y","arr","console","log","toArray","translate","width","height","noStroke","fill","rect","letters","textSize","textAlign","CENTER","w","h","b","text","pop","forEach","draw"],"mappings":"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","file":"chessBoard.417277df.map","sourceRoot":"..","sourcesContent":["class ChessBoard {\r\n    constructor(size, n = 8) {\r\n        /**\r\n         * @type {{size: Number}}\r\n         */\r\n        this.border = {\r\n            'size': size / n / 3\r\n        }\r\n\r\n        /**\r\n         * @type {{width: Number, height: Number}}\r\n         */\r\n        this.size = {\r\n            'width': size - this.border.size * 2,\r\n            'height': size - this.border.size * 2\r\n        };\r\n\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.cols = n;\r\n\r\n        /**\r\n         * @type {Number}\r\n         */\r\n        this.rows = n;\r\n\r\n        /**\r\n         * @type {Array<Tile>}\r\n         */\r\n        this.tiles = new Array();\r\n        for (var i = 0; i < this.cols * this.rows; i++) {\r\n            this.tiles.push(new Tile(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Tile} tile \r\n     */\r\n    getTilePosition(tile) {\r\n        var index = this.tiles.indexOf(tile);\r\n        return {'x': index % this.cols, 'y': Math.floor(index / this.cols)}\r\n    }\r\n\r\n    /**\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     */\r\n    getTileByPosition(x, y) {\r\n        return this.tiles[x + y * this.cols];\r\n    }\r\n\r\n    /**\r\n     * @param {Array<Array<Number>>} arr \r\n     */\r\n    setQueens(arr) {\r\n        console.log(arr.toArray());\r\n    }\r\n\r\n    draw() {\r\n        push();\r\n        translate((width - this.size.width) / 2, (height - this.size.height) / 2);\r\n        noStroke();\r\n\r\n        // border\r\n        fill(170, 0, 70);\r\n        rect(-this.border.size, -this.border.size, this.size.width + 2 * this.border.size, this.size.height + 2 * this.border.size);\r\n        \r\n        // letters\r\n        var letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        fill(255);\r\n        textSize(this.border.size * 0.6);\r\n        textAlign(CENTER, CENTER);\r\n        var w = this.size.width / this.cols;\r\n        var h = this.size.height / this.rows;\r\n        var b = this.border.size / 2;\r\n        push();\r\n        translate(w / 2, -b);\r\n        for (var i = 0; i < this.cols; i++) {\r\n            text(letters[i], 0, 0);\r\n            text(letters[i], 0, this.size.height + this.border.size);\r\n            translate(w, 0);\r\n        }\r\n        pop();\r\n\r\n        // numbers\r\n        push();\r\n        translate(-b, h / 2);\r\n        for (var i = 0; i < this.cols; i++) {\r\n            text(this.cols - i, 0, 0);\r\n            text(this.cols - i, this.size.width + this.border.size, 0);\r\n            translate(0, h);\r\n        }\r\n        pop();\r\n\r\n        // tiles\r\n        this.tiles.forEach(tile => {\r\n            tile.draw();\r\n        });\r\n        pop();\r\n    }\r\n}"]}